/// <reference types="react" />
import { Selector } from 'reselect';
import { AdditionalEquipmentEntities, NormalizedAdditionalEquipmentById } from '@opentrons/step-generation';
import { ProfileFormError } from '../../steplist/formLevel/profileErrors';
import { InstrumentGroup } from '@opentrons/components';
import type { DropdownOption } from '@opentrons/components';
import type { InvariantContext, LabwareEntities, ModuleEntities, PipetteEntities } from '@opentrons/step-generation';
import type { FormWarning } from '../../steplist/formLevel';
import { BaseState } from '../../types';
import { FormData, StepIdType } from '../../form-types';
import { StepArgsAndErrorsById, StepFormErrors } from '../../steplist/types';
import { InitialDeckSetup, ModulesForEditModulesCard, FormPipettesByMount } from '../types';
import { PresavedStepFormState, RootState, SavedStepFormState, BatchEditFormChangesState } from '../reducers';
export declare const getPresavedStepForm: (state: BaseState) => PresavedStepFormState;
export declare const getCurrentFormIsPresaved: Selector<BaseState, boolean>;
export declare const getLabwareEntities: Selector<BaseState, LabwareEntities>;
export declare const _getLabwareEntitiesRootState: (arg0: RootState) => LabwareEntities;
export declare const _getModuleEntitiesRootState: (arg: RootState) => ModuleEntities;
export declare const getModuleEntities: Selector<BaseState, ModuleEntities>;
export declare const _getPipetteEntitiesRootState: (arg: RootState) => PipetteEntities;
export declare const _getAdditionalEquipmentEntitiesRootState: (arg: RootState) => AdditionalEquipmentEntities;
export declare const getAdditionalEquipmentEntities: Selector<BaseState, AdditionalEquipmentEntities>;
export declare const getPipetteEntities: Selector<BaseState, PipetteEntities>;
export declare const _getAdditionalEquipmentRootState: (arg: RootState) => NormalizedAdditionalEquipmentById;
export declare const getAdditionalEquipment: Selector<BaseState, NormalizedAdditionalEquipmentById>;
export declare const getInitialDeckSetupStepForm: Selector<BaseState, FormData>;
export declare const getInitialDeckSetup: Selector<BaseState, InitialDeckSetup>;
export declare const _getInitialDeckSetupRootState: (arg0: RootState) => InitialDeckSetup;
export declare const getPermittedTipracks: Selector<BaseState, string[]>;
export declare const getEquippedPipetteOptions: Selector<BaseState, DropdownOption[]>;
type PipettesForInstrumentGroup = React.ComponentProps<typeof InstrumentGroup>;
export declare const getPipettesForInstrumentGroup: Selector<BaseState, PipettesForInstrumentGroup>;
export declare const getPipettesForEditPipetteForm: Selector<BaseState, FormPipettesByMount>;
export declare const getModulesForEditModulesCard: Selector<BaseState, ModulesForEditModulesCard>;
export declare const getUnsavedForm: Selector<BaseState, FormData | null | undefined>;
export declare const getOrderedStepIds: Selector<BaseState, StepIdType[]>;
export declare const getSavedStepForms: Selector<BaseState, SavedStepFormState>;
export declare const getCurrentFormHasUnsavedChanges: Selector<BaseState, boolean>;
export declare const getBatchEditFieldChanges: Selector<BaseState, BatchEditFormChangesState>;
export declare const getBatchEditFormHasUnsavedChanges: Selector<BaseState, boolean>;
export declare const _hasFieldLevelErrors: (hydratedForm: FormData) => boolean;
export declare const _hasFormLevelErrors: (hydratedForm: FormData, invariantContext: InvariantContext) => boolean;
export declare const _formHasErrors: (hydratedForm: FormData, invariantContext: InvariantContext) => boolean;
export declare const getInvariantContext: Selector<BaseState, InvariantContext>;
export declare const getHydratedUnsavedForm: Selector<BaseState, FormData | null>;
export declare const getDynamicFieldFormErrorsForUnsavedForm: Selector<BaseState, ProfileFormError[]>;
export declare const getFormLevelErrorsForUnsavedForm: Selector<BaseState, StepFormErrors>;
export declare const getCurrentFormCanBeSaved: Selector<BaseState, boolean>;
export declare const getArgsAndErrorsByStepId: Selector<BaseState, StepArgsAndErrorsById>;
export declare const getUnsavedFormIsPristineSetTempForm: Selector<BaseState, boolean>;
export declare const getUnsavedFormIsPristineHeaterShakerForm: Selector<BaseState, boolean>;
export declare const getFormLevelWarningsForUnsavedForm: Selector<BaseState, FormWarning[]>;
export declare const getFormLevelWarningsPerStep: Selector<BaseState, Record<string, FormWarning[]>>;
export {};
