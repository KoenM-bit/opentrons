import { LabwareDefByDefURI } from '../../labware-defs';
import type { DeckSlotId, ModuleType } from '@opentrons/shared-data';
import { InitialDeckSetup, FormPipettesByMount, LabwareOnDeck as LabwareOnDeckType } from '../types';
import type { DeckSlot } from '../../types';
import type { NormalizedPipetteById, PipetteEntities, InvariantContext } from '@opentrons/step-generation';
import type { FormData } from '../../form-types';
export { createPresavedStepForm } from './createPresavedStepForm';
export declare function getIdsInRange<T extends string | number>(orderedIds: T[], startId: T, endId: T): T[];
export declare function getDeckItemIdInSlot(itemIdToSlot: Record<string, DeckSlotId>, slot: DeckSlotId): string | null | undefined;
export declare function denormalizePipetteEntities(pipetteInvariantProperties: NormalizedPipetteById, labwareDefs: LabwareDefByDefURI): PipetteEntities;
export declare const getSlotIdsBlockedBySpanning: (initialDeckSetup: InitialDeckSetup) => DeckSlot[];
export declare const getSlotIsEmpty: (initialDeckSetup: InitialDeckSetup, slot: string, includeStagingAreas?: boolean) => boolean;
export declare const getLabwareOnSlot: (initialDeckSetup: InitialDeckSetup, slot: string) => LabwareOnDeckType | null;
export declare const getIsCrashablePipetteSelected: (pipettesByMount: FormPipettesByMount) => boolean;
export declare const getHasGen1MultiChannelPipette: (pipettes: InitialDeckSetup['pipettes']) => boolean;
export declare const getIsModuleOnDeck: (modules: InitialDeckSetup['modules'], moduleType: ModuleType) => boolean;
export declare function getHydratedForm(rawForm: FormData, invariantContext: InvariantContext): FormData;
