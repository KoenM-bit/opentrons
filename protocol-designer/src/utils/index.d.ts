import { AddressableAreaName, CutoutId, CutoutFixtureId, RobotType } from '@opentrons/shared-data';
import { BoundingRect, GenericRect } from '../collision-types';
import type { AdditionalEquipmentEntity, LabwareEntities, PipetteEntities } from '@opentrons/step-generation';
import type { WellGroup } from '@opentrons/components';
export declare const uuid: () => string;
export declare const rectCollision: (rect1: BoundingRect, rect2: BoundingRect) => boolean;
export declare function clientRectToBoundingRect(rect: ClientRect): BoundingRect;
export declare const getCollidingWells: (rectPositions: GenericRect) => WellGroup;
export declare const arrayToWellGroup: (w: string[]) => WellGroup;
declare const canPipetteUseLabware: (pipetteSpec: import("@opentrons/shared-data").PipetteNameSpecs, labwareDef?: import("@opentrons/shared-data").LabwareDefinition2 | undefined, trashName?: string | undefined) => boolean, getAllWellSetsForLabware: (labwareDef: import("@opentrons/shared-data").LabwareDefinition2) => string[][], getWellSetForMultichannel: (labwareDef: import("@opentrons/shared-data").LabwareDefinition2, well: string, channels: 8 | 96) => string[] | null | undefined;
export { canPipetteUseLabware, getAllWellSetsForLabware, getWellSetForMultichannel, };
export declare const makeTemperatureText: (temperature: number | string | null, t: any) => string;
export declare const makeLidLabelText: (lidOpen: boolean, t: any) => string;
export declare const makeSpeedText: (targetSpeed: number | string | null, t: any) => string;
export declare const makeTimerText: (targetMinutes: number | string | null, targetSeconds: number | string | null, t: any) => string | null;
export declare const getIsAdapter: (labwareId: string, labwareEntities: LabwareEntities) => boolean;
export declare const getStagingAreaSlots: (stagingAreas?: AdditionalEquipmentEntity[]) => string[] | null;
export declare const getHas96Channel: (pipettes: PipetteEntities) => boolean;
export declare const getStagingAreaAddressableAreas: (cutoutIds: CutoutId[]) => AddressableAreaName[];
export declare const getCutoutIdByAddressableArea: (addressableAreaName: AddressableAreaName, cutoutFixtureId: CutoutFixtureId, robotType: RobotType) => CutoutId;
