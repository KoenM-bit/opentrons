name: Nightly Protocol Analysis Testing 
on:
  push:

env:
  EXECUTABLE_NAME: Opentrons.AppImage
  ELECTRON_VERSION: "21.3.1"

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code.
        uses: actions/checkout@v2

      - name: Set up Python 3.7
        id: python-3-7
        uses: actions/setup-python@v4
        with:
            python-version: 3.7
      
      - name: Set up Python 3.11
        id: python-3-11
        uses: actions/setup-python@v4
        with:
            python-version: 3.11

      - name: Setup Runtime Env Vars
        run: |
          echo "PYTHON_3_11_EXEC=${{ steps.python-3-11.outputs.python-path }}" >> $GITHUB_ENV
          echo "PYTHON_3_7_EXEC=${{ steps.python-3-7.outputs.python-path }}" >> $GITHUB_ENV
          echo "EXECUTABLE_PATH=${{ github.workspace }}/${{ env.EXECUTABLE_NAME }}" >> $GITHUB_ENV

      - name: Install Linux dependencies
        run: |
          sudo apt-get install libudev-dev libusb-1.0-0-dev libsystemd-dev fuse libfuse2

      - name: Install pipenv
        run: pip install pipenv

      - name: Setup node
        uses: actions/setup-node@v2
        with:
          node-version: '16'

      - name: Download App Image
        run: |
          curl -o Opentrons.AppImage -L https://s3.amazonaws.com/opentrons-app/builds/Opentrons-v6.3.1-linux-b32811-internal-release_0.14.0.AppImage
          chmod +x ${{ env.EXECUTABLE_PATH }}

      # - name: Build .AppImage
      #   run: |
      #     OT_PYTHON=${{ env.PYTHON_3_7_EXEC }} make setup
      #     OT_PYTHON=${{ env.PYTHON_3_7_EXEC }} make -C app-shell setup
      #     OT_PYTHON=${{ env.PYTHON_3_7_EXEC }} make -C app-shell dist-linux
      #     mv app-shell/dist/*.AppImage ${{ env.EXECUTABLE_PATH }}
      #     chmod +x ${{ env.EXECUTABLE_PATH }}

      - name: Install Chromedriver on the path.
        working-directory: ./app-testing
        run: |
          chmod +x ./ci-tools/linux_get_chromedriver.sh
          ./ci-tools/linux_get_chromedriver.sh ${{ env.ELECTRON_VERSION }}
          chromedriver --version
          CHROMEWEBDRIVER="$(which chromedriver)" >> $GITHUB_ENV

      - name: Install python dependencies.
        working-directory: ./app-testing
        run: |
          pipenv install --skip-lock

      - name: Copy env file.
        working-directory: ./app-testing
        run: |
          cp ci_flex.env .env

      - name: Run Tests.
        working-directory: ./app-testing
        run: |
          export DISPLAY=:99.0
          sudo Xvfb -ac :99 -screen 0 1280x1024x24 > /dev/null 2>&1 &
          echo "${{ env.EXECUTABLE_PATH }}"
          pipenv run python -m pytest -k test_analyses

      - name: Upload results.
        uses: actions/upload-artifact@v2
        with:
          name: results
          path: app-testing/results/
        # Use always() to always run this step to publish test results when there are test failures
        if: ${{ always() }}