name: Nightly Protocol Analysis Testing 
on:
  push:
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code.
        uses: actions/checkout@v2

      - name: Set up Python 3.7
        id: python-3-7
        uses: actions/setup-python@v4
        with:
            python-version: 3.7
      
      - name: Set up Python 3.11
        id: python-3-11
        uses: actions/setup-python@v4
        with:
            python-version: 3.11

      - name: Store Python executable names
        run: |
          echo "PYTHON_3_11_EXEC=${{ steps.python-3-11.outputs.python-path }}" >> $GITHUB_ENV
          echo "PYTHON_3_7_EXEC=${{ steps.python-3-7.outputs.python-path }}" >> $GITHUB_ENV

      - name: Install Dependenvies
        run: |
          sudo apt-get install libudev-dev libusb-1.0-0-dev

      - name: Install pipenv
        run: pip install pipenv

      - name: Setup node
        uses: actions/setup-node@v2
        with:
          node-version: '16'

      - name: Setup Code
        run: |
          OT_PYTHON=${{ env.PYTHON_3_7_EXEC }} make setup
          OT_PYTHON=${{ env.PYTHON_3_7_EXEC }} make -C app-shell setup
          OT_PYTHON=${{ env.PYTHON_3_7_EXEC }} make -C app-shell dist-linux
          mv app-shell/dist/*.AppImage ./

      # - name: Get Opentrons AppImage and set env.EXECUTABLE_PATH
      #   run: |
      #     wget ${{ github.event.inputs.appimage-url }}
      #     filename=$(basename ${{ github.event.inputs.appimage-url }})
      #     chmod +x $filename
      #     filepath=$(pwd)/$filename
      #     echo "EXECUTABLE_PATH=$filepath" >> $GITHUB_ENV

    #   - name: Install Chromedriver on the path.
    #     run: |
    #       chmod +x ./app-testing/ci-tools/linux_get_chromedriver.sh
    #       ./app-testing/ci-tools/linux_get_chromedriver.sh ${{ github.event.inputs.electron-version }}
    #       chromedriver --version
    #   - name: Run docker robot
    #     run: docker-compose up -d
    #   - name: Install python dependencies.
    #     working-directory: ./app-testing
    #     run: |
    #       pip install pipenv==2020.8.13
    #       pipenv install --skip-lock
    #   - name: Run Tests.
    #     working-directory: ./app-testing
    #     run: |
    #       export DISPLAY=:99
    #       sudo Xvfb -ac :99 -screen 0 1280x1024x24 > /dev/null 2>&1 &
    #       export EXECUTABLE_PATH=${{ env.EXECUTABLE_PATH }}
    #       export ROBOT_BASE_URL="http://127.0.0.1:31950"
    #       make test
    #   - name: Upload results.
    #     uses: actions/upload-artifact@v2
    #     with:
    #       name: results
    #       path: app-testing/results/
    #     # Use always() to always run this step to publish test results when there are test failures
    #     if: ${{ always() }}