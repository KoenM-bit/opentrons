diff --git a/api/src/opentrons/config/defaults_ot3.py b/api/src/opentrons/config/defaults_ot3.py
index 89696c5b2a..ffaacb97a4 100644
--- a/api/src/opentrons/config/defaults_ot3.py
+++ b/api/src/opentrons/config/defaults_ot3.py
@@ -106,10 +106,10 @@ DEFAULT_ACCELERATIONS: Final[ByGantryLoad[Dict[OT3AxisKind, float]]] = ByGantryL
         OT3AxisKind.Q: 10,
     },
     low_throughput={
-        OT3AxisKind.X: 1600,
-        OT3AxisKind.Y: 1000,
+        OT3AxisKind.X: 500,
+        OT3AxisKind.Y: 200,
         OT3AxisKind.Z: 300,
-        OT3AxisKind.P: 100,
+        OT3AxisKind.P: 1500,
         OT3AxisKind.Z_G: 150,
     },
 )
diff --git a/api/src/opentrons/hardware_control/backends/ot3controller.py b/api/src/opentrons/hardware_control/backends/ot3controller.py
index 1cf8ba849a..1c132d1cd4 100644
--- a/api/src/opentrons/hardware_control/backends/ot3controller.py
+++ b/api/src/opentrons/hardware_control/backends/ot3controller.py
@@ -494,8 +494,22 @@ class OT3Controller:
         for axis, pos in response.items():
             self._position.update({axis: pos[0]})
             self._encoder_position.update({axis: pos[1]})
+            # TODO (FPS 6-01-2023): Remove this once the Feature Flag to ignore stall detection is removed.
+            # This check will latch the motor status for an axis at "true" if it was ever set to true.
+            # To account for the case where a motor axis has its power reset, we also depend on the
+            # "encoder_ok" flag staying set (it will only be False if the motor axis has not been
+            # homed since a power cycle)
+            motor_ok_latch = (
+                (not ff.stall_detection_enabled())
+                and self._motor_status[axis].motor_ok
+                and self._motor_status[axis].encoder_ok
+            )
             self._motor_status.update(
-                {axis: MotorStatus(motor_ok=pos[2], encoder_ok=pos[3])}
+                {
+                    axis: MotorStatus(
+                        motor_ok=(pos[2] or motor_ok_latch), encoder_ok=pos[3]
+                    )
+                }
             )
 
     @requires_update
diff --git a/api/src/opentrons/hardware_control/instruments/ot3/pipette.py b/api/src/opentrons/hardware_control/instruments/ot3/pipette.py
index 5f96add2a4..047dc58add 100644
--- a/api/src/opentrons/hardware_control/instruments/ot3/pipette.py
+++ b/api/src/opentrons/hardware_control/instruments/ot3/pipette.py
@@ -422,11 +422,11 @@ class Pipette(AbstractInstrument[PipetteConfigurations]):
 
     def set_current_volume(self, new_volume: float) -> None:
         assert new_volume >= 0
-        assert new_volume <= self.working_volume
+        # assert new_volume <= self.working_volume
         self._current_volume = new_volume
 
     def add_current_volume(self, volume_incr: float) -> None:
-        assert self.ok_to_add_volume(volume_incr)
+        # assert self.ok_to_add_volume(volume_incr)
         self._current_volume += volume_incr
 
     def remove_current_volume(self, volume_incr: float) -> None:
@@ -434,7 +434,8 @@ class Pipette(AbstractInstrument[PipetteConfigurations]):
         self._current_volume -= volume_incr
 
     def ok_to_add_volume(self, volume_incr: float) -> bool:
-        return self.current_volume + volume_incr <= self.working_volume
+        # return self.current_volume + volume_incr <= self.working_volume
+        return True
 
     def add_tip(self, tip_length: float) -> None:
         """
